-- Project Status Overview (RAG Format)
SELECT 
    p.PROJECT_ID,
    p.PROJECT_NAME,
    p.PROJECT_TYPE,
    p.STATUS,
    p.PRIORITY,
    p.START_DATE,
    p.PLANNED_END_DATE,
    p.ACTUAL_END_DATE,
    pb.PLANNED_BUDGET,
    pb.ACTUAL_BUDGET,
    COUNT(pr.RISK_ID) as ACTIVE_RISKS,
    COUNT(pd.DELAY_ID) as TOTAL_DELAYS,
    CASE 
        WHEN p.STATUS = 'ON_TRACK' AND COUNT(pr.RISK_ID) = 0 THEN 'GREEN'
        WHEN p.STATUS = 'AT_RISK' OR COUNT(pr.RISK_ID) > 0 THEN 'AMBER'
        WHEN p.STATUS = 'DELAYED' OR COUNT(pd.DELAY_ID) > 0 THEN 'RED'
        ELSE 'GREEN'
    END as RAG_STATUS
FROM PROJECTS p
LEFT JOIN PROJECT_BUDGET pb ON p.PROJECT_ID = pb.PROJECT_ID
LEFT JOIN PROJECT_RISKS pr ON p.PROJECT_ID = pr.PROJECT_ID AND pr.STATUS = 'ACTIVE'
LEFT JOIN PROJECT_DELAYS pd ON p.PROJECT_ID = pd.PROJECT_ID
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;

-- Budget Usage Analysis
SELECT 
    p.PROJECT_ID,
    p.PROJECT_NAME,
    pb.PLANNED_BUDGET,
    pb.ACTUAL_BUDGET,
    (pb.ACTUAL_BUDGET - pb.PLANNED_BUDGET) as BUDGET_VARIANCE,
    ((pb.ACTUAL_BUDGET - pb.PLANNED_BUDGET) / pb.PLANNED_BUDGET) * 100 as BUDGET_VARIANCE_PERCENTAGE,
    CASE 
        WHEN pb.ACTUAL_BUDGET <= pb.PLANNED_BUDGET THEN 'UNDER_BUDGET'
        ELSE 'OVER_BUDGET'
    END as BUDGET_STATUS
FROM PROJECTS p
JOIN PROJECT_BUDGET pb ON p.PROJECT_ID = pb.PROJECT_ID;

-- Risk Overview Dashboard
SELECT 
    p.PROJECT_ID,
    p.PROJECT_NAME,
    pr.RISK_TYPE,
    pr.SEVERITY,
    pr.PROBABILITY,
    pr.RISK_DESCRIPTION,
    pr.MITIGATION_PLAN,
    pr.STATUS as RISK_STATUS,
    CASE 
        WHEN pr.SEVERITY = 'HIGH' AND pr.PROBABILITY = 'HIGH' THEN 'CRITICAL'
        WHEN pr.SEVERITY = 'HIGH' OR pr.PROBABILITY = 'HIGH' THEN 'HIGH'
        WHEN pr.SEVERITY = 'MEDIUM' AND pr.PROBABILITY = 'MEDIUM' THEN 'MEDIUM'
        ELSE 'LOW'
    END as RISK_LEVEL
FROM PROJECTS p
JOIN PROJECT_RISKS pr ON p.PROJECT_ID = pr.PROJECT_ID
WHERE pr.STATUS = 'ACTIVE';

-- Project Timeline Analysis
SELECT 
    p.PROJECT_ID,
    p.PROJECT_NAME,
    p.START_DATE,
    p.PLANNED_END_DATE,
    p.ACTUAL_END_DATE,
    DATEDIFF('day', p.START_DATE, p.PLANNED_END_DATE) as PLANNED_DURATION,
    DATEDIFF('day', p.START_DATE, COALESCE(p.ACTUAL_END_DATE, CURRENT_DATE())) as ACTUAL_DURATION,
    CASE 
        WHEN p.ACTUAL_END_DATE IS NULL THEN 'IN_PROGRESS'
        WHEN p.ACTUAL_END_DATE <= p.PLANNED_END_DATE THEN 'ON_TIME'
        ELSE 'DELAYED'
    END as COMPLETION_STATUS
FROM PROJECTS p;

-- Milestone Tracking
SELECT 
    p.PROJECT_ID,
    p.PROJECT_NAME,
    pm.MILESTONE_NAME,
    pm.PLANNED_DATE,
    pm.ACTUAL_DATE,
    DATEDIFF('day', pm.PLANNED_DATE, COALESCE(pm.ACTUAL_DATE, CURRENT_DATE())) as DELAY_DAYS,
    CASE 
        WHEN pm.ACTUAL_DATE IS NULL THEN 'PENDING'
        WHEN pm.ACTUAL_DATE <= pm.PLANNED_DATE THEN 'ON_TIME'
        ELSE 'DELAYED'
    END as MILESTONE_STATUS
FROM PROJECTS p
JOIN PROJECT_MILESTONES pm ON p.PROJECT_ID = pm.PROJECT_ID;

-- Risk Distribution by Type
SELECT 
    RISK_TYPE,
    COUNT(*) as RISK_COUNT,
    AVG(CASE 
        WHEN SEVERITY = 'HIGH' THEN 3
        WHEN SEVERITY = 'MEDIUM' THEN 2
        ELSE 1
    END) as AVG_SEVERITY_SCORE
FROM PROJECT_RISKS
WHERE STATUS = 'ACTIVE'
GROUP BY RISK_TYPE;

-- Project Health Score
WITH project_metrics AS (
    SELECT 
        p.PROJECT_ID,
        p.PROJECT_NAME,
        p.STATUS,
        COUNT(pr.RISK_ID) as ACTIVE_RISKS,
        COUNT(pd.DELAY_ID) as TOTAL_DELAYS,
        CASE 
            WHEN pb.ACTUAL_BUDGET > pb.PLANNED_BUDGET THEN 1
            ELSE 0
        END as BUDGET_OVERAGE
    FROM PROJECTS p
    LEFT JOIN PROJECT_BUDGET pb ON p.PROJECT_ID = pb.PROJECT_ID
    LEFT JOIN PROJECT_RISKS pr ON p.PROJECT_ID = pr.PROJECT_ID AND pr.STATUS = 'ACTIVE'
    LEFT JOIN PROJECT_DELAYS pd ON p.PROJECT_ID = pd.PROJECT_ID
    GROUP BY 1, 2, 3, 6
)
SELECT 
    PROJECT_ID,
    PROJECT_NAME,
    STATUS,
    ACTIVE_RISKS,
    TOTAL_DELAYS,
    BUDGET_OVERAGE,
    CASE 
        WHEN ACTIVE_RISKS = 0 AND TOTAL_DELAYS = 0 AND BUDGET_OVERAGE = 0 THEN 100
        WHEN ACTIVE_RISKS = 0 AND TOTAL_DELAYS = 0 THEN 80
        WHEN ACTIVE_RISKS = 0 OR TOTAL_DELAYS = 0 THEN 60
        WHEN ACTIVE_RISKS <= 2 AND TOTAL_DELAYS <= 1 THEN 40
        ELSE 20
    END as HEALTH_SCORE
FROM project_metrics; 